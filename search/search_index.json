{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Qudit Cliffords Python library for generating random qudit Clifford gates and decomposing them.","title":"Home"},{"location":"#qudit-cliffords","text":"Python library for generating random qudit Clifford gates and decomposing them.","title":"Qudit Cliffords"},{"location":"clifford/","text":"qclif.CliffordBase Bases: SymplecticArray A base class for your Clifford group! clifford_group_size ( n ) classmethod Compute the size of the Clifford group for any number of qudits for the calling class's modulus d. Parameters: n ( int ) \u2013 The number of qudits. Must be non-negative. Returns: int ( int ) \u2013 The size of the Clifford group on n qudits of dimension d. decompose ( output_form = 'string' ) Decomposes a symplectic matrix into a product of elementary symplectic matrices, each of which correspond to a known qudit Clifford gate. Parameters: output_form ( Literal[&#39;string&#39;, &#39;matrix&#39;] , default: 'string' ) \u2013 The type of output to be generated. Default is a list of strings of gate names. Returns: list [ str | Self ] \u2013 list[str|Self]: A list of either string gate names of symplectic matrices. Elements in the list compose to the original Clifford gate. from_index ( index , n ) classmethod Generate an element of the symplectic group from that element's index. Parameters: index ( int ) \u2013 An integer from 0 (inclusive) to the size of the symplectic group (exclusive). See .symplectic_group_size . n ( int ) \u2013 Half the size of the symplectic matrix to be generated, or the number of qubits in the equivalent Clifford group. Returns: Self ( Self ) \u2013 description from_named_gate ( name , * args ) classmethod Create a Clifford representation for a named gate. Options are: - The Identity gate ( I or ID ) - The Multiplier gate ( MULT ) - The SWAP gate - The CSUM gate - The generalized phase gate (or its Hermitian conjugate) ( PHASE ( PHASE_DG ), S ( S_DG ), or P ( P_DG )) - The generalized Hadamard gate (or its Hermitian conjugate) ( H ( H_DG), FOURIER ( FOURIER_DG ), or F ( F_DG`)) Parameters: name ( Literal[&#39;I&#39;, &#39;ID&#39;, &#39;SWAP&#39;, &#39;MULT&#39;, &#39;CSUM&#39;, &#39;PHASE&#39;, &#39;S&#39;, &#39;P&#39;, &#39;PHASE_DG&#39;, &#39;S_DG&#39;, &#39;P_DG&#39;, &#39;H&#39;, &#39;FOURIER&#39;, &#39;F&#39;, &#39;H_DG&#39;, &#39;FOURIER_DG&#39;, &#39;F_DG&#39;, ] ) \u2013 description Raises: ValueError \u2013 description Returns: Self ( Self ) \u2013 description random_symplectic ( n ) classmethod Generate a uniformly random element of the symplectic group. Parameters: n ( int ) \u2013 Half the size of the symplectic matrix to be generated, or the number of qubits in the equivalent Clifford group. Returns: Self ( Self ) \u2013 A uniform random symplectic matrix mod d.","title":"Clifford Gates"},{"location":"clifford/#qclif.CliffordBase","text":"Bases: SymplecticArray A base class for your Clifford group!","title":"CliffordBase"},{"location":"clifford/#qclif.CliffordBase.clifford_group_size","text":"Compute the size of the Clifford group for any number of qudits for the calling class's modulus d. Parameters: n ( int ) \u2013 The number of qudits. Must be non-negative. Returns: int ( int ) \u2013 The size of the Clifford group on n qudits of dimension d.","title":"clifford_group_size"},{"location":"clifford/#qclif.CliffordBase.decompose","text":"Decomposes a symplectic matrix into a product of elementary symplectic matrices, each of which correspond to a known qudit Clifford gate. Parameters: output_form ( Literal[&#39;string&#39;, &#39;matrix&#39;] , default: 'string' ) \u2013 The type of output to be generated. Default is a list of strings of gate names. Returns: list [ str | Self ] \u2013 list[str|Self]: A list of either string gate names of symplectic matrices. Elements in the list compose to the original Clifford gate.","title":"decompose"},{"location":"clifford/#qclif.CliffordBase.from_index","text":"Generate an element of the symplectic group from that element's index. Parameters: index ( int ) \u2013 An integer from 0 (inclusive) to the size of the symplectic group (exclusive). See .symplectic_group_size . n ( int ) \u2013 Half the size of the symplectic matrix to be generated, or the number of qubits in the equivalent Clifford group. Returns: Self ( Self ) \u2013 description","title":"from_index"},{"location":"clifford/#qclif.CliffordBase.from_named_gate","text":"Create a Clifford representation for a named gate. Options are: - The Identity gate ( I or ID ) - The Multiplier gate ( MULT ) - The SWAP gate - The CSUM gate - The generalized phase gate (or its Hermitian conjugate) ( PHASE ( PHASE_DG ), S ( S_DG ), or P ( P_DG )) - The generalized Hadamard gate (or its Hermitian conjugate) ( H ( H_DG), FOURIER ( FOURIER_DG ), or F ( F_DG`)) Parameters: name ( Literal[&#39;I&#39;, &#39;ID&#39;, &#39;SWAP&#39;, &#39;MULT&#39;, &#39;CSUM&#39;, &#39;PHASE&#39;, &#39;S&#39;, &#39;P&#39;, &#39;PHASE_DG&#39;, &#39;S_DG&#39;, &#39;P_DG&#39;, &#39;H&#39;, &#39;FOURIER&#39;, &#39;F&#39;, &#39;H_DG&#39;, &#39;FOURIER_DG&#39;, &#39;F_DG&#39;, ] ) \u2013 description Raises: ValueError \u2013 description Returns: Self ( Self ) \u2013 description","title":"from_named_gate"},{"location":"clifford/#qclif.CliffordBase.random_symplectic","text":"Generate a uniformly random element of the symplectic group. Parameters: n ( int ) \u2013 Half the size of the symplectic matrix to be generated, or the number of qubits in the equivalent Clifford group. Returns: Self ( Self ) \u2013 A uniform random symplectic matrix mod d.","title":"random_symplectic"},{"location":"dnary/","text":"qclif.DnaryArray Bases: ndarray A d -nary integer numpy array. Use as a normal numpy , but all outputs will be computed using arithmetic in \\mathbb{Z}_d . Do not directly create instances of this class! Instead, use the classmethod DnaryArray.set_d(...) to create a subclass with a specific value for d , then create instances of that subclass. Instances can be created from any array-like data acceptable by np.array(...) . Examples: >>> D3 = DnaryArray.set_d(3) >>> D3([1, 2, 3, 4]) DnaryArray(d=3)([1, 2, 0, 1]) >>> D3.eye(4) D3([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) >>> D3.eye(4)-2 D3([[2, 1, 1, 1], [1, 2, 1, 1], [1, 1, 2, 1], [1, 1, 1, 2]]) >>> (D3.eye(4)-2).inverse() D3([[2, 1, 1, 1], [1, 2, 1, 1], [1, 1, 2, 1], [1, 1, 1, 2]]) >>> import numpy as np >>> np.linalg.matrix_power(D3.eye(4)-2, 2) D3([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) >>> MyD6Array = DnaryArray.set_d(6) >>> (2 * MyD6Array.eye(2)) @ [2,3] MyD6Array([4, 0]) basis_vector ( i , n ) classmethod Generates the i th standard basis vector of length n . This is the vector of all zeros except the i th component equal to 1 . Parameters: i ( int ) \u2013 The component of the basis vector. n ( int ) \u2013 The length of the vector Returns: Self \u2013 The i th standard basis vector. Examples: ``` class D3(DnaryArray): d=3 D3.basis_vector(1, 5) D3([0, 1, 0, 0, 0]) d abstractmethod property The modulus of the array class. Should not be changed after class creation. det () Alias for .determinant . Returns: int \u2013 The determinant of the array modulo d . determinant () Returns: int \u2013 The determinant of the array modulo d. dnary_inverse ( n ) classmethod Alias for dnary_inverse(n, cls.d) . Calculates the multiplicative inverse of n in \\mathbb{Z}_d if it exists. If d is prime and n>0 , the integer is guaranteed to exist. For general d , n^{-1} exists if \\text{gcd}(n,d)=1 . Parameters: n ( int ) \u2013 The integer to invert. Returns: int \u2013 The integer n^{-1} such that n n^{-1} \\text{ mod } d = 1 , or None if such an integer does not exist. dnary_to_int ( digits ) classmethod Alias for int_to_dnary(n, cls.d) . Given a list of the d -nary digits of a number, return that number in base 10. See also [qclif.DnaryArray.int_to_dnary]. Parameters: digits ( list [ int ] ) \u2013 A list of the d -nary digits of a number. Returns: int \u2013 The number in base 10. eye ( n ) classmethod Returns: Self \u2013 The (n, n) identity matrix with integer type. int_to_dnary ( n , result_list_size = None ) classmethod Alias for int_to_dnary(n, cls.d) . Decomposes a base 10 integer into a list of its d -nary digits. See also [qclif.DnaryArray.dnary_to_int]. Parameters: n ( int ) \u2013 The base 10 integer to be factored into its d -nary digits. result_list_size ( int | None , default: None ) \u2013 The length of the list to return; if None , will use the minimum number of digits to result the input integer in d -nary. Defaults to None . Raises: ValueError \u2013 Invalid input parameters. Returns: list [ int ] \u2013 A list of the d -nary digits of n The list has L elements l_i such that n=\\sum_{i=0}^L l_i d^i. inv ( ** kwargs ) Alias for mod_matrix_inv . Returns: Self | None \u2013 The array's inverse, or None if the array is not invertible. inverse ( ** kwargs ) Alias for mod_matrix_inv . Returns: Self | None \u2013 The array's inverse, or None if the array is not invertible. is_invertible () Determines if an array is invertible by checking if its determinant is invertible in \\mathbb{Z}_d . Returns: bool \u2013 Whether the array is invertible. is_matrix property Returns: bool \u2013 Whether this is a 2D array. is_nonzero () Returns: bool \u2013 Whether the array has any nonzero values in it. is_vector property Returns: bool \u2013 Whether this is a 1D array. is_zero () Returns: bool \u2013 Whether the array is all zero. mod_matrix_inv ( validate = True , suppress_warnings = True ) Calculates the matrix inverse in \\mathbb{Z}_d -arithmetic using A^{-1}=\\frac{1}{|A|}\\text{Adj}(A), where \\text{Adj}(A) is the matrix adjugate of A and |A| is the determinant. Parameters: validate ( bool , default: True ) \u2013 Whether to validate the result through multiplication. Defaults to True. suppress_warnings ( bool , default: True ) \u2013 If False, warnings will be raise if the array is not invertible. Defaults to True. Raises: RuntimeError \u2013 If the inversion fails for an invertible array. Theoretically this should never happen. Returns: Self | None \u2013 The array's inverse, or None if the array is not invertible. random_array ( shape , allow_zero = True ) classmethod Returns an array of the given shape with uniform random integers mod d , including the all-zero array unless specified otherwise. Parameters: shape ( tuple [ int ] ) \u2013 The shape of the array. allow_zero ( bool , default: True ) \u2013 Whether to allow the zero matrix. Defaults to True . Returns: Self \u2013 A uniform random d -nary array. set_d ( d ) classmethod Classmethod for creating a child class with a specific d. Parameters: d ( _type_ ) \u2013 description Returns: _type_ ( type [ DnaryArray ] ) \u2013 description zeros ( shape ) classmethod Returns an all-zero array of the given shape. Parameters: shape ( int | tuple [ int ] ) \u2013 The shape of the desired array. Returns: Self \u2013 The zero array of the given shape.","title":"D-Nary Arrays"},{"location":"dnary/#qclif.DnaryArray","text":"Bases: ndarray A d -nary integer numpy array. Use as a normal numpy , but all outputs will be computed using arithmetic in \\mathbb{Z}_d . Do not directly create instances of this class! Instead, use the classmethod DnaryArray.set_d(...) to create a subclass with a specific value for d , then create instances of that subclass. Instances can be created from any array-like data acceptable by np.array(...) . Examples: >>> D3 = DnaryArray.set_d(3) >>> D3([1, 2, 3, 4]) DnaryArray(d=3)([1, 2, 0, 1]) >>> D3.eye(4) D3([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) >>> D3.eye(4)-2 D3([[2, 1, 1, 1], [1, 2, 1, 1], [1, 1, 2, 1], [1, 1, 1, 2]]) >>> (D3.eye(4)-2).inverse() D3([[2, 1, 1, 1], [1, 2, 1, 1], [1, 1, 2, 1], [1, 1, 1, 2]]) >>> import numpy as np >>> np.linalg.matrix_power(D3.eye(4)-2, 2) D3([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) >>> MyD6Array = DnaryArray.set_d(6) >>> (2 * MyD6Array.eye(2)) @ [2,3] MyD6Array([4, 0])","title":"DnaryArray"},{"location":"dnary/#qclif.DnaryArray.basis_vector","text":"Generates the i th standard basis vector of length n . This is the vector of all zeros except the i th component equal to 1 . Parameters: i ( int ) \u2013 The component of the basis vector. n ( int ) \u2013 The length of the vector Returns: Self \u2013 The i th standard basis vector. Examples: ``` class D3(DnaryArray): d=3 D3.basis_vector(1, 5) D3([0, 1, 0, 0, 0])","title":"basis_vector"},{"location":"dnary/#qclif.DnaryArray.d","text":"The modulus of the array class. Should not be changed after class creation.","title":"d"},{"location":"dnary/#qclif.DnaryArray.det","text":"Alias for .determinant . Returns: int \u2013 The determinant of the array modulo d .","title":"det"},{"location":"dnary/#qclif.DnaryArray.determinant","text":"Returns: int \u2013 The determinant of the array modulo d.","title":"determinant"},{"location":"dnary/#qclif.DnaryArray.dnary_inverse","text":"Alias for dnary_inverse(n, cls.d) . Calculates the multiplicative inverse of n in \\mathbb{Z}_d if it exists. If d is prime and n>0 , the integer is guaranteed to exist. For general d , n^{-1} exists if \\text{gcd}(n,d)=1 . Parameters: n ( int ) \u2013 The integer to invert. Returns: int \u2013 The integer n^{-1} such that n n^{-1} \\text{ mod } d = 1 , or None if such an integer does not exist.","title":"dnary_inverse"},{"location":"dnary/#qclif.DnaryArray.dnary_to_int","text":"Alias for int_to_dnary(n, cls.d) . Given a list of the d -nary digits of a number, return that number in base 10. See also [qclif.DnaryArray.int_to_dnary]. Parameters: digits ( list [ int ] ) \u2013 A list of the d -nary digits of a number. Returns: int \u2013 The number in base 10.","title":"dnary_to_int"},{"location":"dnary/#qclif.DnaryArray.eye","text":"Returns: Self \u2013 The (n, n) identity matrix with integer type.","title":"eye"},{"location":"dnary/#qclif.DnaryArray.int_to_dnary","text":"Alias for int_to_dnary(n, cls.d) . Decomposes a base 10 integer into a list of its d -nary digits. See also [qclif.DnaryArray.dnary_to_int]. Parameters: n ( int ) \u2013 The base 10 integer to be factored into its d -nary digits. result_list_size ( int | None , default: None ) \u2013 The length of the list to return; if None , will use the minimum number of digits to result the input integer in d -nary. Defaults to None . Raises: ValueError \u2013 Invalid input parameters. Returns: list [ int ] \u2013 A list of the d -nary digits of n The list has L elements l_i such that n=\\sum_{i=0}^L l_i d^i.","title":"int_to_dnary"},{"location":"dnary/#qclif.DnaryArray.inv","text":"Alias for mod_matrix_inv . Returns: Self | None \u2013 The array's inverse, or None if the array is not invertible.","title":"inv"},{"location":"dnary/#qclif.DnaryArray.inverse","text":"Alias for mod_matrix_inv . Returns: Self | None \u2013 The array's inverse, or None if the array is not invertible.","title":"inverse"},{"location":"dnary/#qclif.DnaryArray.is_invertible","text":"Determines if an array is invertible by checking if its determinant is invertible in \\mathbb{Z}_d . Returns: bool \u2013 Whether the array is invertible.","title":"is_invertible"},{"location":"dnary/#qclif.DnaryArray.is_matrix","text":"Returns: bool \u2013 Whether this is a 2D array.","title":"is_matrix"},{"location":"dnary/#qclif.DnaryArray.is_nonzero","text":"Returns: bool \u2013 Whether the array has any nonzero values in it.","title":"is_nonzero"},{"location":"dnary/#qclif.DnaryArray.is_vector","text":"Returns: bool \u2013 Whether this is a 1D array.","title":"is_vector"},{"location":"dnary/#qclif.DnaryArray.is_zero","text":"Returns: bool \u2013 Whether the array is all zero.","title":"is_zero"},{"location":"dnary/#qclif.DnaryArray.mod_matrix_inv","text":"Calculates the matrix inverse in \\mathbb{Z}_d -arithmetic using A^{-1}=\\frac{1}{|A|}\\text{Adj}(A), where \\text{Adj}(A) is the matrix adjugate of A and |A| is the determinant. Parameters: validate ( bool , default: True ) \u2013 Whether to validate the result through multiplication. Defaults to True. suppress_warnings ( bool , default: True ) \u2013 If False, warnings will be raise if the array is not invertible. Defaults to True. Raises: RuntimeError \u2013 If the inversion fails for an invertible array. Theoretically this should never happen. Returns: Self | None \u2013 The array's inverse, or None if the array is not invertible.","title":"mod_matrix_inv"},{"location":"dnary/#qclif.DnaryArray.random_array","text":"Returns an array of the given shape with uniform random integers mod d , including the all-zero array unless specified otherwise. Parameters: shape ( tuple [ int ] ) \u2013 The shape of the array. allow_zero ( bool , default: True ) \u2013 Whether to allow the zero matrix. Defaults to True . Returns: Self \u2013 A uniform random d -nary array.","title":"random_array"},{"location":"dnary/#qclif.DnaryArray.set_d","text":"Classmethod for creating a child class with a specific d. Parameters: d ( _type_ ) \u2013 description Returns: _type_ ( type [ DnaryArray ] ) \u2013 description","title":"set_d"},{"location":"dnary/#qclif.DnaryArray.zeros","text":"Returns an all-zero array of the given shape. Parameters: shape ( int | tuple [ int ] ) \u2013 The shape of the desired array. Returns: Self \u2013 The zero array of the given shape.","title":"zeros"},{"location":"dnary_arithmetic/","text":"qclif.dnary_arithmetic int_to_dnary ( n , d , result_list_size = None ) Decomposes a base 10 integer into a list of its d -nary digits. See also dnary_to_int . Parameters: n ( int ) \u2013 The base 10 integer to be factored into its d -nary digits. result_list_size ( int | None , default: None ) \u2013 The length of the list to return; if None , will use the minimum number of digits to result the input integer in d -nary. Defaults to None . Raises: ValueError \u2013 Invalid input parameters. Returns: list [ int ] \u2013 A list of the d -nary digits of n The list has L elements l_i such that n=\\sum_{i=0}^L l_i d^i. dnary_to_int ( digits , d ) Given a list of the d -nary digits of a number, return that number in base 10. See also int_to_dnary . Parameters: digits ( list [ int ] ) \u2013 A list of the d -nary digits of a number. Returns: int \u2013 The number in base 10. dnary_inverse ( n , d ) Calculates the multiplicative inverse of n in \\mathbb{Z}_d if it exists. If d is prime and n>0 , the integer is guaranteed to exist. For general d , n^{-1} exists if \\text{gcd}(n,d)=1 . Parameters: n ( int ) \u2013 The integer to invert. d ( int ) \u2013 The modulus to invert by. Returns: int | None \u2013 The integer n^{-1} such that n n^{-1} \\text{ mod } d = 1 , or None if such an integer does not exist.","title":"D-Nary Arithmetic"},{"location":"dnary_arithmetic/#qclif.dnary_arithmetic","text":"","title":"dnary_arithmetic"},{"location":"dnary_arithmetic/#qclif.dnary_arithmetic.int_to_dnary","text":"Decomposes a base 10 integer into a list of its d -nary digits. See also dnary_to_int . Parameters: n ( int ) \u2013 The base 10 integer to be factored into its d -nary digits. result_list_size ( int | None , default: None ) \u2013 The length of the list to return; if None , will use the minimum number of digits to result the input integer in d -nary. Defaults to None . Raises: ValueError \u2013 Invalid input parameters. Returns: list [ int ] \u2013 A list of the d -nary digits of n The list has L elements l_i such that n=\\sum_{i=0}^L l_i d^i.","title":"int_to_dnary"},{"location":"dnary_arithmetic/#qclif.dnary_arithmetic.dnary_to_int","text":"Given a list of the d -nary digits of a number, return that number in base 10. See also int_to_dnary . Parameters: digits ( list [ int ] ) \u2013 A list of the d -nary digits of a number. Returns: int \u2013 The number in base 10.","title":"dnary_to_int"},{"location":"dnary_arithmetic/#qclif.dnary_arithmetic.dnary_inverse","text":"Calculates the multiplicative inverse of n in \\mathbb{Z}_d if it exists. If d is prime and n>0 , the integer is guaranteed to exist. For general d , n^{-1} exists if \\text{gcd}(n,d)=1 . Parameters: n ( int ) \u2013 The integer to invert. d ( int ) \u2013 The modulus to invert by. Returns: int | None \u2013 The integer n^{-1} such that n n^{-1} \\text{ mod } d = 1 , or None if such an integer does not exist.","title":"dnary_inverse"},{"location":"symplectic/","text":"qclif.SymplecticArray Bases: DnaryArray Class implementing symplectic algebra on matrices and vectors over \\mathbb{Z}_d , the modulo- d integers. Standard array operations are inherited from DnaryArray . Do not directly create instances of this class! Instead, use the classmethod SymplecticArray.set_d(...) to create a subclass with a specific value for d , then create instances of that subclass. For a given n>0 , the symplectic group \\text{Sp}(2n, \\mathbb{Z}_d) is the group of 2n\\times2n matrices A such that A^T \\Lambda_n A=\\mathbb{I}_{2n}, where \\Lambda_n=\\begin{bmatrix}0 & -\\mathbb{I}_n \\\\ \\mathbb{I}_n & 0 \\end{bmatrix} \\text{ mod } d and \\mathbb{I}_n is the n\\times n identity matrix. Similarly, the symplectic inner product \\langle v, w\\rangle between length- 2n vectors v,w is defined as \\langle v, w\\rangle = v^T\\Lambda_n w. If \\langle v, w\\rangle=-1 \\text{ mod } d , we say (v,w) is a symplectic pair. An equivalent definition for a symplectic matrix is the requirement that, for each 0\\leq i< n , the matrix's i th and (i+n) th columns form a symplectic pair (Python indexing). Note 2n\\times2n symplectic matrices over \\mathbb{Z}_d form a representation of the Clifford group \\mathcal{C}_d^n on n qudits of dimension d . In fact, \\text{Sp}(2n, \\mathbb{Z}_d)\\simeq \\mathcal{C}_d^n / \\mathcal{P}_d^n, where \\mathcal{P}_d^n is the n qudit Pauli group. See arXiv:quant-ph/0408190 . Note The matrix \\Lambda_n may be defined differently in other contexts. The definition used here follows arXiv:quant-ph/0408190 . See here for other definitions. Lambda property Returns: Self \u2013 The defining symplectic array matching the invoking object's dimension ( 2n\\times 2n ). See .LambdaN . LambdaN ( n ) classmethod Returns the defining symplectic array \\Lambda_n for any given n using the class modulus d . See SymplecticArray . Parameters: n ( int ) \u2013 \\Lambda_n is a 2n\\times 2n array. Returns: Self \u2013 The d -nary (2n, 2n) array that defines the symplectic group and symplectic inner product. Transvection A class representing transvections, a class of linear transformations on vectors. Transvections are defined by a vector \\vec u and a constant c , and act as v\\mapsto T_{u, c}(v)=v + c\\langle v, u\\rangle u . All arithmetic is mod d. Transvections applied to matrices apply the above transformation column-wise. Parameters: u ( SymplecticArray ) \u2013 The vector to transvect by. c ( int ) \u2013 The constant of the transvection. __call__ ( vector_or_matrix ) Apply the transvection to a vector or matrix of the same type as the transvection's vector. Parameters: vector_or_matrix ( SymplecticArray ) \u2013 A vector or matrix of the same type as the Transvection's vector. Returns: SymplecticArray ( SymplecticArray ) \u2013 The transvection applied to the vector or matrix. find_transvection ( u , v ) classmethod Returns a tuple of transvections T1, T2 such that T2(T1(u))=v Parameters: u ( SymplecticArray ) \u2013 Vector you are transvecting from . v ( SymplecticArray ) \u2013 Vector you are transvecting to . Returns: ( Transvection , Transvection ) \u2013 A tuple (T1, T2) such that T2(T1(u))==v transvect_matrix_columns ( A ) Apply the transvection to a matrix of the same type as the transvection's vector. Parameters: A ( SymplecticArray ) \u2013 A matrix of the same type as the Transvection's vector. Returns: SymplecticArray ( SymplecticArray ) \u2013 The transvection applied to the matrix. transvect_vector ( v ) Apply the transvection to a vector of the same type as the transvection's vector. Parameters: v ( SymplecticArray ) \u2013 A vector of the same type as the Transvection's vector. Returns: SymplecticArray ( SymplecticArray ) \u2013 The transvection applied to the vector. embed_symplectic () Embeds a 2n\\times 2n array into a (2n+1)\\times(2n+1) array via the symplecticity-preserving block embedding \\begin{bmatrix} M_{11} & M_{12}\\\\ M_{21} & M_{22} \\end{bmatrix} \\mapsto \\begin{bmatrix} 1 & 0 & 0 & 0\\\\ 0& M_{11} & 0 & M_{12}\\\\ 0 & 0 & 1 & 0\\\\ 0 & M_{21} & 0 & M_{22} \\end{bmatrix}, which inserts identity rows/columns at indices 0 and n (Python indexing) and fills the gaps with zeros. Returns: Self \u2013 The embedded array. from_index ( index , n ) classmethod Generate an element of the symplectic group from that element's index. Parameters: index ( int ) \u2013 An integer from 0 (inclusive) to the size of the symplectic group (exclusive). See .symplectic_group_size . n ( int ) \u2013 Half the size of the symplectic matrix to be generated, or the number of qubits in the equivalent Clifford group. Returns: Self ( Self ) \u2013 The symplectic matrix corresponding to the input index. inner_product ( v1 , v2 ) classmethod Computes the symplectic inner product of the given vectors. The symplectic inner product \\langle v, w\\rangle between length- 2n vectors v,w is defined as \\langle v, w\\rangle = v^T\\Lambda_n w. Parameters: v1 ( Self | ndarray ) \u2013 The first vector. Will be coerced into the type of the calling class. v2 ( Self | ndarray ) \u2013 The second vector. Will be coerced into the type of the calling class. Raises: ValueError \u2013 Input arrays are not one-dimensional. ValueError \u2013 Input arrays are not the same size. Returns: int \u2013 The symplectic inner product of v1 and v2 . Tip If you've already created a vector v , you can call v.inner_product_with(w) method to compute \\langle v,w\\rangle . Note The modulus d is defined by the calling class. Thus, v1 and v2 can be any array-like data, but they will be coerced into the type of the calling class (by coercing components to integers and modding by d ). inner_product_with ( other ) Compute the symplectic inner product of the calling vector with the other vector. See the .inner_product classmethod. Parameters: other ( Self ) \u2013 The other vector. Returns: int \u2013 The symplectic inner product of the calling vector with the other vector. Tip Python's pipe operator | is overloaded with this method, so you can call v1.inner_product_with(v2) as v1 | v2 . Examples: >>> class S3(SymplecticArray): d=3 >>> v1 = S3([1, 0, 0, 0]) >>> v2 = S3([0, 0, 1, 0]) >>> v1 | v2 2 is_symplectic_matrix () Returns: bool \u2013 Whether the calling array is a symplectic matrix. is_symplectic_pair ( v1 , v2 ) classmethod Determine whether a pair of vectors form a symplectic pair. Two vectors v, w form a symplectic pair if \\langle v, w\\rangle = -1 \\text{ mod } d. See also .is_symplectic_pair_with . Parameters: v1 ( Self ) \u2013 The first vector. v2 ( Self ) \u2013 The second vector. Returns: bool \u2013 Whether the vectors form a symplectic pair. is_symplectic_pair_with ( other ) If the calling object is a vector (i.e. 1D array), determine whether it forms a symplectic pair with another vector. See the .is_symplectic_pair classmethod. Raises an exception if the calling object is not a vector. Parameters: other ( Self ) \u2013 The other vector. Raises: TypeError \u2013 Both the calling object and the input must be 1d arrays. Returns: bool \u2013 Whether the two vectors form a symplectic pair. n property Half of the array size. Will raise an exception for odd-sized arrays. Defines the defining symplectic array \\Lambda_n . See the .Lambda property and the .LambdaN method. Raises: ValueError \u2013 Not accessible for odd-sized arrays. Returns: int \u2013 Half of the array size. nn property Returns: int \u2013 The symplectic array size 2n . random_symplectic ( n ) classmethod Generate a uniformly random element of the symplectic group. Parameters: n ( int ) \u2013 Half the size of the symplectic matrix to be generated, or the number of qubits in the equivalent Clifford group. Returns: Self ( Self ) \u2013 A uniform random d -nary symplectic matrix. symplectic_group_size ( n ) classmethod Returns the size of the symplectic group for a given n . That number is \\prod_{i=1}^n d^{2i-1}(d^{2i}-1). Parameters: n ( int ) \u2013 Half the size of the symplectic matrix, or the number of qubits in the equivalent Clifford group. Returns: int \u2013 The number of different 2n\\times 2n symplectic matrices over \\mathbb{Z}_d .","title":"Symplectic Arrays"},{"location":"symplectic/#qclif.SymplecticArray","text":"Bases: DnaryArray Class implementing symplectic algebra on matrices and vectors over \\mathbb{Z}_d , the modulo- d integers. Standard array operations are inherited from DnaryArray . Do not directly create instances of this class! Instead, use the classmethod SymplecticArray.set_d(...) to create a subclass with a specific value for d , then create instances of that subclass. For a given n>0 , the symplectic group \\text{Sp}(2n, \\mathbb{Z}_d) is the group of 2n\\times2n matrices A such that A^T \\Lambda_n A=\\mathbb{I}_{2n}, where \\Lambda_n=\\begin{bmatrix}0 & -\\mathbb{I}_n \\\\ \\mathbb{I}_n & 0 \\end{bmatrix} \\text{ mod } d and \\mathbb{I}_n is the n\\times n identity matrix. Similarly, the symplectic inner product \\langle v, w\\rangle between length- 2n vectors v,w is defined as \\langle v, w\\rangle = v^T\\Lambda_n w. If \\langle v, w\\rangle=-1 \\text{ mod } d , we say (v,w) is a symplectic pair. An equivalent definition for a symplectic matrix is the requirement that, for each 0\\leq i< n , the matrix's i th and (i+n) th columns form a symplectic pair (Python indexing). Note 2n\\times2n symplectic matrices over \\mathbb{Z}_d form a representation of the Clifford group \\mathcal{C}_d^n on n qudits of dimension d . In fact, \\text{Sp}(2n, \\mathbb{Z}_d)\\simeq \\mathcal{C}_d^n / \\mathcal{P}_d^n, where \\mathcal{P}_d^n is the n qudit Pauli group. See arXiv:quant-ph/0408190 . Note The matrix \\Lambda_n may be defined differently in other contexts. The definition used here follows arXiv:quant-ph/0408190 . See here for other definitions.","title":"SymplecticArray"},{"location":"symplectic/#qclif.SymplecticArray.Lambda","text":"Returns: Self \u2013 The defining symplectic array matching the invoking object's dimension ( 2n\\times 2n ). See .LambdaN .","title":"Lambda"},{"location":"symplectic/#qclif.SymplecticArray.LambdaN","text":"Returns the defining symplectic array \\Lambda_n for any given n using the class modulus d . See SymplecticArray . Parameters: n ( int ) \u2013 \\Lambda_n is a 2n\\times 2n array. Returns: Self \u2013 The d -nary (2n, 2n) array that defines the symplectic group and symplectic inner product.","title":"LambdaN"},{"location":"symplectic/#qclif.SymplecticArray.Transvection","text":"A class representing transvections, a class of linear transformations on vectors. Transvections are defined by a vector \\vec u and a constant c , and act as v\\mapsto T_{u, c}(v)=v + c\\langle v, u\\rangle u . All arithmetic is mod d. Transvections applied to matrices apply the above transformation column-wise. Parameters: u ( SymplecticArray ) \u2013 The vector to transvect by. c ( int ) \u2013 The constant of the transvection.","title":"Transvection"},{"location":"symplectic/#qclif.SymplecticArray.Transvection.__call__","text":"Apply the transvection to a vector or matrix of the same type as the transvection's vector. Parameters: vector_or_matrix ( SymplecticArray ) \u2013 A vector or matrix of the same type as the Transvection's vector. Returns: SymplecticArray ( SymplecticArray ) \u2013 The transvection applied to the vector or matrix.","title":"__call__"},{"location":"symplectic/#qclif.SymplecticArray.Transvection.find_transvection","text":"Returns a tuple of transvections T1, T2 such that T2(T1(u))=v Parameters: u ( SymplecticArray ) \u2013 Vector you are transvecting from . v ( SymplecticArray ) \u2013 Vector you are transvecting to . Returns: ( Transvection , Transvection ) \u2013 A tuple (T1, T2) such that T2(T1(u))==v","title":"find_transvection"},{"location":"symplectic/#qclif.SymplecticArray.Transvection.transvect_matrix_columns","text":"Apply the transvection to a matrix of the same type as the transvection's vector. Parameters: A ( SymplecticArray ) \u2013 A matrix of the same type as the Transvection's vector. Returns: SymplecticArray ( SymplecticArray ) \u2013 The transvection applied to the matrix.","title":"transvect_matrix_columns"},{"location":"symplectic/#qclif.SymplecticArray.Transvection.transvect_vector","text":"Apply the transvection to a vector of the same type as the transvection's vector. Parameters: v ( SymplecticArray ) \u2013 A vector of the same type as the Transvection's vector. Returns: SymplecticArray ( SymplecticArray ) \u2013 The transvection applied to the vector.","title":"transvect_vector"},{"location":"symplectic/#qclif.SymplecticArray.embed_symplectic","text":"Embeds a 2n\\times 2n array into a (2n+1)\\times(2n+1) array via the symplecticity-preserving block embedding \\begin{bmatrix} M_{11} & M_{12}\\\\ M_{21} & M_{22} \\end{bmatrix} \\mapsto \\begin{bmatrix} 1 & 0 & 0 & 0\\\\ 0& M_{11} & 0 & M_{12}\\\\ 0 & 0 & 1 & 0\\\\ 0 & M_{21} & 0 & M_{22} \\end{bmatrix}, which inserts identity rows/columns at indices 0 and n (Python indexing) and fills the gaps with zeros. Returns: Self \u2013 The embedded array.","title":"embed_symplectic"},{"location":"symplectic/#qclif.SymplecticArray.from_index","text":"Generate an element of the symplectic group from that element's index. Parameters: index ( int ) \u2013 An integer from 0 (inclusive) to the size of the symplectic group (exclusive). See .symplectic_group_size . n ( int ) \u2013 Half the size of the symplectic matrix to be generated, or the number of qubits in the equivalent Clifford group. Returns: Self ( Self ) \u2013 The symplectic matrix corresponding to the input index.","title":"from_index"},{"location":"symplectic/#qclif.SymplecticArray.inner_product","text":"Computes the symplectic inner product of the given vectors. The symplectic inner product \\langle v, w\\rangle between length- 2n vectors v,w is defined as \\langle v, w\\rangle = v^T\\Lambda_n w. Parameters: v1 ( Self | ndarray ) \u2013 The first vector. Will be coerced into the type of the calling class. v2 ( Self | ndarray ) \u2013 The second vector. Will be coerced into the type of the calling class. Raises: ValueError \u2013 Input arrays are not one-dimensional. ValueError \u2013 Input arrays are not the same size. Returns: int \u2013 The symplectic inner product of v1 and v2 . Tip If you've already created a vector v , you can call v.inner_product_with(w) method to compute \\langle v,w\\rangle . Note The modulus d is defined by the calling class. Thus, v1 and v2 can be any array-like data, but they will be coerced into the type of the calling class (by coercing components to integers and modding by d ).","title":"inner_product"},{"location":"symplectic/#qclif.SymplecticArray.inner_product_with","text":"Compute the symplectic inner product of the calling vector with the other vector. See the .inner_product classmethod. Parameters: other ( Self ) \u2013 The other vector. Returns: int \u2013 The symplectic inner product of the calling vector with the other vector. Tip Python's pipe operator | is overloaded with this method, so you can call v1.inner_product_with(v2) as v1 | v2 . Examples: >>> class S3(SymplecticArray): d=3 >>> v1 = S3([1, 0, 0, 0]) >>> v2 = S3([0, 0, 1, 0]) >>> v1 | v2 2","title":"inner_product_with"},{"location":"symplectic/#qclif.SymplecticArray.is_symplectic_matrix","text":"Returns: bool \u2013 Whether the calling array is a symplectic matrix.","title":"is_symplectic_matrix"},{"location":"symplectic/#qclif.SymplecticArray.is_symplectic_pair","text":"Determine whether a pair of vectors form a symplectic pair. Two vectors v, w form a symplectic pair if \\langle v, w\\rangle = -1 \\text{ mod } d. See also .is_symplectic_pair_with . Parameters: v1 ( Self ) \u2013 The first vector. v2 ( Self ) \u2013 The second vector. Returns: bool \u2013 Whether the vectors form a symplectic pair.","title":"is_symplectic_pair"},{"location":"symplectic/#qclif.SymplecticArray.is_symplectic_pair_with","text":"If the calling object is a vector (i.e. 1D array), determine whether it forms a symplectic pair with another vector. See the .is_symplectic_pair classmethod. Raises an exception if the calling object is not a vector. Parameters: other ( Self ) \u2013 The other vector. Raises: TypeError \u2013 Both the calling object and the input must be 1d arrays. Returns: bool \u2013 Whether the two vectors form a symplectic pair.","title":"is_symplectic_pair_with"},{"location":"symplectic/#qclif.SymplecticArray.n","text":"Half of the array size. Will raise an exception for odd-sized arrays. Defines the defining symplectic array \\Lambda_n . See the .Lambda property and the .LambdaN method. Raises: ValueError \u2013 Not accessible for odd-sized arrays. Returns: int \u2013 Half of the array size.","title":"n"},{"location":"symplectic/#qclif.SymplecticArray.nn","text":"Returns: int \u2013 The symplectic array size 2n .","title":"nn"},{"location":"symplectic/#qclif.SymplecticArray.random_symplectic","text":"Generate a uniformly random element of the symplectic group. Parameters: n ( int ) \u2013 Half the size of the symplectic matrix to be generated, or the number of qubits in the equivalent Clifford group. Returns: Self ( Self ) \u2013 A uniform random d -nary symplectic matrix.","title":"random_symplectic"},{"location":"symplectic/#qclif.SymplecticArray.symplectic_group_size","text":"Returns the size of the symplectic group for a given n . That number is \\prod_{i=1}^n d^{2i-1}(d^{2i}-1). Parameters: n ( int ) \u2013 Half the size of the symplectic matrix, or the number of qubits in the equivalent Clifford group. Returns: int \u2013 The number of different 2n\\times 2n symplectic matrices over \\mathbb{Z}_d .","title":"symplectic_group_size"},{"location":"usage/","text":"Here's how you use it: pip install qclif","title":"Usage"}]}